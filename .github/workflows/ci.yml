name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

env:
  FORCE_COLOR: "1"  # Make tools pretty.
  PYTHON_LATEST: "3.11"
  POETRY_VIRTUALENVS_CREATE: false


jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_LATEST }}
      - uses: snok/install-poetry@v1
        with:
          version: 1.3.0
          virtualenvs-create: true
      - name: Install dependencies
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --only=dev

      - name: black
        run: python -m black --check --diff .

      - name: flake8
        run: python -m flake8 .

      - name: isort
        run: python -m isort --check-only -v --profile black .

  typing:
    name: Typing
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_LATEST }}
      - uses: snok/install-poetry@v1
        with:
          version: 1.3.0
          virtualenvs-create: true
      - name: Install dependencies
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install

      - name: mypy
        run: python -m mypy .


  tests:
    name: tests on ${{ matrix.python-version }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1
        with:
          version: 1.3.0
          virtualenvs-create: true
      - name: Install dependencies
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install

      - name: Setup Git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

      - run: poetry run pytest --cov=foxops_client
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore


  coverage:
    name: Combine & check coverage
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - run: python -m pip install --upgrade coverage[toml]
      - uses: actions/download-artifact@v4
        with:
          name: coverage-data
      - name: Combine coverage & fail if it's <70%.
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --fail-under=70
      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov


  package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_LATEST }}

      - run: python -m pip install build twine check-wheel-contents
      - run: python -m build --sdist --wheel .
      - run: ls -l dist
      - run: check-wheel-contents dist/*.whl
      - name: Check long_description
        run: python -m twine check dist/*


  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_LATEST }}
      - run: python -m pip install -e .
      - run: python -c 'import foxops_client; print(foxops_client.__version__)'
